name: test

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number for comment-triggered runs'
        required: false
        type: string

jobs:
  test:
    name: Test
    runs-on: macos-15
    permissions:
      contents: read
      checks: write
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
        
    - name: Create check run
      if: ${{ github.event.inputs.pr_number }}
      id: check
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ github.event.inputs.pr_number }}
          });
          
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head_sha: pr.data.head.sha,
            name: 'Test',
            status: 'in_progress',
            started_at: new Date().toISOString()
          });
          
          return check.data.id;
      
    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.3.app
      
    - name: Cache Swift dependencies
      uses: actions/cache@v3
      with:
        path: |
          .build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build
      run: swift build
      
    - name: Test
      run: swift test
      
    - name: Update check run
      if: ${{ always() && github.event.inputs.pr_number }}
      uses: actions/github-script@v7
      with:
        script: |
          const checkId = ${{ steps.check.outputs.result }};
          const conclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          const summary = conclusion === 'success' ? 'All tests passed' : 'Tests failed';
          
          await github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id: checkId,
            status: 'completed',
            conclusion: conclusion,
            completed_at: new Date().toISOString(),
            output: {
              title: 'Test Results',
              summary: summary
            }
          });